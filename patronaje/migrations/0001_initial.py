# Generated by Django 5.2 on 2025-10-17 01:34

import django.contrib.postgres.fields
import django.contrib.postgres.indexes
import django.contrib.postgres.search
import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DxfFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('file', models.FileField(upload_to='dxf_files/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Material',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=50)),
                ('descripcion', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='MeasurementSchema',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text="Identificador interno de la medida (ej. 'bust', 'waist')", max_length=50, unique=True)),
                ('display_name', models.CharField(help_text="Nombre legible de la medida (ej. 'Busto', 'Cintura')", max_length=100)),
                ('unit', models.CharField(help_text='Unidad base (cm, in, etc.)', max_length=10)),
                ('min', models.DecimalField(blank=True, decimal_places=2, help_text='Valor mínimo permitido (opcional)', max_digits=6, null=True)),
                ('max', models.DecimalField(blank=True, decimal_places=2, help_text='Valor máximo permitido (opcional)', max_digits=6, null=True)),
                ('required', models.BooleanField(default=False, help_text='Indica si esta medida es obligatoria')),
                ('formula_notes', models.TextField(blank=True, default='', help_text='Notas o fórmulas de derivación para esta medida')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
            ],
            options={
                'ordering': ['code'],
                'indexes': [models.Index(fields=['code'], name='idx_measurementschema_code')],
            },
        ),
        migrations.CreateModel(
            name='MeasurementTable',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text="Nombre de la tabla (p.ej. 'Tabla Hombres EU', 'Women's Size Chart')", max_length=150)),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('unisex', 'Unisex')], default='unisex', max_length=10)),
                ('size_system', models.CharField(blank=True, default='', help_text='Sistema de tallas (p.ej. EU, US, MX)', max_length=50)),
                ('unit_system', models.CharField(choices=[('metric', 'Metric (cm)'), ('imperial', 'Imperial (in)')], default='metric', help_text='Sistema de unidades usado en las medidas', max_length=10)),
                ('measures', models.JSONField(blank=True, default=dict, help_text="Diccionario de medidas base (ej. {'bust': 90, 'waist': 70})")),
                ('version', models.PositiveIntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('owner', models.ForeignKey(blank=True, help_text='Usuario propietario o creador de la tabla', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='measurement_tables', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PatronBase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, help_text='Código único del patrón (p.ej. PAT-TEE-BASIC)', max_length=64, null=True)),
                ('name', models.CharField(help_text='Nombre legible del patrón', max_length=150)),
                ('description', models.TextField(blank=True, default='', help_text='Descripción corta')),
                ('category', models.CharField(blank=True, default='', help_text='Categoría / familia', max_length=100)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived')], db_index=True, default='draft', help_text='Estado de publicación', max_length=10)),
                ('params_schema', models.JSONField(blank=True, default=dict, help_text='JSON Schema de parámetros de entrada')),
                ('constraints', models.JSONField(blank=True, default=dict, help_text='Reglas/inequations/fórmulas simbólicas')),
                ('pieces', models.JSONField(blank=True, default=dict, help_text='Definición paramétrica de piezas')),
                ('grading_rules', models.JSONField(blank=True, default=dict, help_text='Reglas de tallaje/escala')),
                ('geometry_dsl', models.TextField(blank=True, help_text='(Opcional) DSL para construir el patrón 2D', null=True)),
                ('version', models.PositiveIntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='patrones_creados', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at', '-version'],
            },
        ),
        migrations.CreateModel(
            name='PartePatron',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre_parte', models.CharField(max_length=50)),
                ('medidas', models.JSONField(blank=True, null=True)),
                ('geometria', models.JSONField(blank=True, null=True)),
                ('observaciones', models.TextField(blank=True)),
                ('patron_base', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='partes', to='patronaje.patronbase')),
            ],
        ),
        migrations.CreateModel(
            name='PlantillaPrenda',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, help_text='Código único de plantilla (p.ej. TEE-OXFORD-SLIM)', max_length=64, null=True)),
                ('name', models.CharField(help_text='Nombre de la plantilla', max_length=150)),
                ('description', models.TextField(blank=True, default='', help_text='Descripción corta')),
                ('category', models.CharField(blank=True, default='', help_text='Categoría / familia', max_length=100)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived')], db_index=True, default='draft', help_text='Estado de publicación', max_length=10)),
                ('default_params', models.JSONField(blank=True, default=dict, help_text='Valores por defecto de parámetros del patrón')),
                ('exposed_options', models.JSONField(blank=True, default=dict, help_text='Opciones expuestas a UI (select/radio/boolean/range) con metadatos')),
                ('compatibility_rules', models.JSONField(blank=True, default=dict, help_text='Reglas de compatibilidad entre opciones (forbid/require/if-then)')),
                ('materials_policy', models.JSONField(blank=True, default=dict, help_text='Materiales/acabados permitidos + consumos base')),
                ('size_range', models.JSONField(blank=True, default=dict, help_text='Definición de tallas/rango (p.ej. XS-XXL) o medidas objetivo')),
                ('hero_url', models.URLField(blank=True, null=True)),
                ('gallery', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(), blank=True, default=list, size=None)),
                ('version', models.PositiveIntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(editable=False, null=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='plantillas_creadas', to=settings.AUTH_USER_MODEL)),
                ('pattern_base', models.ForeignKey(help_text='Patrón paramétrico del cual deriva esta plantilla', on_delete=django.db.models.deletion.PROTECT, related_name='plantillas', to='patronaje.patronbase')),
            ],
            options={
                'ordering': ['-created_at', '-version'],
            },
        ),
        migrations.CreateModel(
            name='PlantillaMaterial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('material', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plantillas', to='patronaje.material')),
                ('plantilla', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='materiales', to='patronaje.plantillaprenda')),
            ],
        ),
        migrations.CreateModel(
            name='Configuration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('template_version', models.PositiveIntegerField(help_text='Versión de la plantilla en el momento de crear la configuración')),
                ('pattern_version', models.PositiveIntegerField(help_text='Versión del patrón base en el momento de crear la configuración')),
                ('measurement_source', models.CharField(choices=[('table', 'Tabla de medidas'), ('custom', 'Medidas personalizadas'), ('customer', 'Perfil de cliente')], default='table', help_text='Fuente de medidas para resolver el patrón', max_length=10)),
                ('custom_measures', models.JSONField(blank=True, default=dict, help_text='Medidas personalizadas (si measurement_source=custom)')),
                ('selected_options', models.JSONField(blank=True, default=dict, help_text='Opciones seleccionadas por el usuario (collar, puño, etc.)')),
                ('resolved_params', models.JSONField(blank=True, default=dict, help_text='Parámetros finales tras validación/derivación (incluye holguras, etc.)')),
                ('pieces_2d', models.JSONField(blank=True, default=dict, help_text='Geometría 2D resuelta (líneas/curvas/notches) lista para exportar')),
                ('mesh3d_ref', models.CharField(blank=True, default='', help_text='Ruta/ID a GLB/OBJ generado para preview 3D', max_length=255)),
                ('material_assignments', models.JSONField(blank=True, default=dict, help_text='Asignación de materiales por pieza/segmento')),
                ('cost_breakdown', models.JSONField(blank=True, default=dict, help_text='Detalle de costos (materiales, mano de obra, acabados, overhead)')),
                ('price_total', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Precio final calculado tras aplicar reglas', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('currency', models.CharField(default='USD', max_length=8)),
                ('state', models.CharField(choices=[('draft', 'Draft'), ('ready', 'Ready'), ('approved', 'Approved'), ('archived', 'Archived')], db_index=True, default='draft', max_length=10)),
                ('config_fingerprint', models.CharField(db_index=True, help_text='SHA-256 de (pattern_version, template_version, selected_options, resolved_params, measures)', max_length=64)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('measurement_table', models.ForeignKey(blank=True, help_text='Tabla de medidas si measurement_source=table', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='configurations', to='patronaje.measurementtable')),
                ('template', models.ForeignKey(help_text='Plantilla desde la cual se crea esta configuración', on_delete=django.db.models.deletion.PROTECT, related_name='configurations', to='patronaje.plantillaprenda')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ExportArtifact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kind', models.CharField(choices=[('pdf', 'PDF'), ('dxf', 'DXF'), ('svg', 'SVG'), ('glb', 'GLB'), ('techpack', 'TechPack')], db_index=True, help_text='Tipo de artefacto exportado', max_length=16)),
                ('path', models.CharField(help_text='Ruta o identificador del archivo exportado (p.ej. S3 key, path local)', max_length=1024)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Metadatos adicionales (JSON)')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('configuration', models.ForeignKey(help_text='Configuración desde la cual se generó el artefacto', on_delete=django.db.models.deletion.CASCADE, related_name='export_artifacts', to='patronaje.configuration')),
            ],
            options={
                'verbose_name': 'Export Artifact',
                'verbose_name_plural': 'Export Artifacts',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['configuration'], name='idx_expart_cfg'), models.Index(fields=['kind'], name='idx_exportartifact_kind'), models.Index(fields=['created_at'], name='idx_exportartifact_created_at')],
            },
        ),
        migrations.AddIndex(
            model_name='measurementtable',
            index=models.Index(fields=['gender'], name='idx_measurementtable_gender'),
        ),
        migrations.AddIndex(
            model_name='measurementtable',
            index=models.Index(fields=['unit_system'], name='idx_mt_unit'),
        ),
        migrations.AddConstraint(
            model_name='measurementtable',
            constraint=models.UniqueConstraint(fields=('name', 'version'), name='uq_mt_name_ver'),
        ),
        migrations.AddIndex(
            model_name='patronbase',
            index=models.Index(fields=['code'], name='idx_patron_code'),
        ),
        migrations.AddIndex(
            model_name='patronbase',
            index=models.Index(fields=['status'], name='idx_patron_status'),
        ),
        migrations.AddConstraint(
            model_name='patronbase',
            constraint=models.UniqueConstraint(fields=('code', 'version'), name='uq_patron_code_version'),
        ),
        migrations.AddIndex(
            model_name='plantillaprenda',
            index=models.Index(fields=['code'], name='idx_template_code'),
        ),
        migrations.AddIndex(
            model_name='plantillaprenda',
            index=models.Index(fields=['status'], name='idx_template_status'),
        ),
        migrations.AddIndex(
            model_name='plantillaprenda',
            index=django.contrib.postgres.indexes.GinIndex(fields=['search_vector'], name='idx_template_searchvec'),
        ),
        migrations.AddConstraint(
            model_name='plantillaprenda',
            constraint=models.UniqueConstraint(fields=('code', 'version'), name='uq_template_code_version'),
        ),
        migrations.AlterUniqueTogether(
            name='plantillamaterial',
            unique_together={('plantilla', 'material')},
        ),
        migrations.AddIndex(
            model_name='configuration',
            index=models.Index(fields=['state'], name='idx_configuration_state'),
        ),
        migrations.AddIndex(
            model_name='configuration',
            index=models.Index(fields=['created_at'], name='idx_configuration_created_at'),
        ),
        migrations.AddIndex(
            model_name='configuration',
            index=models.Index(fields=['config_fingerprint'], name='idx_configuration_fingerprint'),
        ),
        migrations.AddConstraint(
            model_name='configuration',
            constraint=models.UniqueConstraint(fields=('template', 'config_fingerprint'), name='uq_template_fingerprint'),
        ),
    ]
